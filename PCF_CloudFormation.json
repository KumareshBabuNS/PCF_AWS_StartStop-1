
{
  "Description": "pivotalcf template",
  "Mappings": {
    "NatAmi": {
      "ap-northeast-1": {
        "AMI": "ami-27d6e626"
      },
      "ap-southeast-1": {
        "AMI": "ami-6aa38238"
      },
      "ap-southeast-2": {
        "AMI": "ami-893f53b3"
      },
      "eu-west-1": {
        "AMI": "ami-14913f63"
      },
      "sa-east-1": {
        "AMI": "ami-224dc94a"
      },
      "us-east-1": {
        "AMI": "ami-184dc970"
      },
      "us-west-1": {
        "AMI": "ami-a98396ec"
      },
      "us-west-2": {
        "AMI": "ami-290f4119"
      }
    }
  },
  "Outputs": {
    "NatEip1": {
      "Description": "AWS Elastic IP of the NAT instance 1",
      "Value": {
        "Ref": "NatEip1"
      }
    },
   "PrivateSubnet1" : {
      "Value" : { "Ref" : "PrivateSubnet1" },
      "Description" : "This is the SubnetID of te Private Subnet"
   },
   "PublicSubnet1" : {
      "Value" : { "Ref" : "PublicSubnet1" },
      "Description" : "This is the SubnetID of te Public Subnet"
   },
   "PCFVpcId" : {
      "Value" : { "Ref" : "PCFVPC" },
      "Description" : "This is the VpcID of the PCF VPC"
   }, 
   "OpsManDNS" : {
      "Value" : { "Fn::GetAtt": [ "OpsManagerInstance", "PublicDnsName" ] },
      "Description" : "This is the PublicDNS Name of OpsManger"
   }    

  },
  "Parameters": {
    "AWSAccessKeyID": {
      "Type": "String",
      "Default": "",
      "Description": "Enter your AWS Access Key ID"
    },
"SSHKEY": {
      "Type": "String",
      "Default": "NotWorking"
    },
    
    "AWSSecretKey": {
      "Type": "String",
      "Default": "",
      "Description": "Enter AWS Secret Key"
    },
    "OpsMgrWebUID": {
      "Type": "String",
      "Default": "admin",
      "Description": "Ops Manager Web Username (will create) - admin is default"
    },
    "OpsMgrWebPW": {
      "Type": "String",
      "NoEcho": "true",
      "Default": "password",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Description": "Ops Manager Web Password - password is default"
    },
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "Alphanumeric characters, underscores, dashes only",
      "Description": "Existing key pair to access instances",
      "Default": "opsmgr",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "String"
    },
    "OpsMgrAMI": {
      "Type": "String",
      "Default": "ami-aa0721c2",
      "Description": "Enter Ops Manager AMI"
    },
    "ElasticRuntimeURL": {
      "Type": "String",
      "Default": "http://bit.ly/1GMp8Oi",
      "Description": "URL to latest Elastic Runtime URL"
    },

    "AWSRegion": {
      "Type": "String",
      "Default": "us-east-1",
      "Description": "AWS Region"
    },
    "AvailabilityZone1": {
      "AllowedPattern": "[-a-zA-Z0-9]*",
      "ConstraintDescription": "Alphanumeric characters and dashes only",
      "Default": "us-east-1b",
      "Description": "Availability Zone name",
      "MaxLength": "15",
      "MinLength": "10",
      "Type": "String"
    },
    "NatInstanceType": {
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Instance type must be of a valid EC2 type",
      "Default": "m1.small",
      "Description": "EC2 instance type for NAT instances",
      "Type": "String"
    }
  },
  "Resources": {
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "NatEip1": {
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NatInstance1"
        }
      },
      "Type": "AWS::EC2::EIP"
    },
    "OpsManagerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": { "Ref" : "OpsMgrAMI" },
        "InstanceType": "m3.xlarge",
        "KernelId": "aki-919dcaf8",
        "KeyName": { "Ref" : "KeyName" },
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/sda1",
                  "Ebs" : {
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "100"
                  }
               }
            ],
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Ops Manager"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
            "#!/bin/bash -ex","\n",
            "cd /tmp","\n",
            "git clone https://gist.github.com/5ea5bb91e2749fdb73b5.git /tmp/json","\n",
            "sleep 30","\n",
            "curl --insecure \"https://localhost/api/users\" -d 'user[user_name]=",{ "Ref" : "OpsMgrWebUID" },"&user[password]=",{ "Ref" : "OpsMgrWebPW" },"&user[password_confirmation]=",{ "Ref" : "OpsMgrWebPW" },"' -X POST","\n",                 
            "curl --insecure \"https://localhost/api/installation_settings\" -X GET -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" }," > /tmp/origconfig.json","\n",
            "cd /tmp","\n",
            "rm -rf /tmp/awscli","\n",
            "mkdir /tmp/awscli","\n",
            "cd /tmp/awscli","\n",
            "wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip > /dev/null","\n",
            "unzip awscli-bundle.zip","\n",
            "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws","\n",
            "cd /tmp","\n",
            "mkdir /tmp/jq","\n",
            "cd /tmp/jq","\n",
            "wget http://stedolan.github.io/jq/download/source/jq-1.4.tar.gz","\n",
            "tar -xzvf jq-1.4.tar.gz","\n",
            "cd jq-1.4","\n",
            "./configure ; make","\n",
            "sudo make install","\n",
            "cd /tmp","\n",
            "aws configure set aws_access_key_id ", {"Ref":"AWSAccessKeyID"}," ; aws configure set aws_secret_access_key ", {"Ref":"AWSSecretKey"}, " ; aws configure set region ", {"Ref":"AWSRegion"},"\n",
            "touch /tmp/touch1.txt","\n",
            "aws ec2 describe-security-groups --group-ids ",{ "Ref" : "sgPCF" }," | jq '.SecurityGroups[0].GroupName' > /tmp/testgroup.txt","\n",
            "touch /tmp/touch2.txt","\n",
            "sgName=$(aws ec2 describe-security-groups --group-ids ", { "Ref" : "sgPCF" }," | jq '.SecurityGroups[0].GroupName')","\n",
            "touch /tmp/touch2.1.txt","\n",
            "sgName=${sgName//\\\"}","\n",
            "touch /tmp/touch3.txt","\n",
            "sudo sed -i \"s/<SECURITYGROUP>/$sgName/g\" /tmp/json/merge.json","\n",
            "sudo sed -i 's/<PRIVATESUBNETID>/",{"Ref": "PrivateSubnet1"},"/g' /tmp/json/merge.json","\n",
            "sudo sed -i 's/<AZNAME>/",{"Ref": "AvailabilityZone1"},"/g' /tmp/json/merge.json","\n",
            "sudo sed -i 's=<AWSACCESSKEY>=",{"Ref": "AWSAccessKeyID"},"=g' /tmp/json/merge.json","\n",
            "sudo sed -i 's=<AWSSECRETKEY>=",{"Ref": "AWSSecretKey"},"=g' /tmp/json/merge.json","\n",
            "sudo sed -i 's~<VPCID>~",{"Ref": "PCFVPC"},"~g' /tmp/json/merge.json","\n",
            "touch /tmp/touch3.0.1.txt","\n",
            "sudo sed -i 's~<SSHKEY>~",{"Ref": "SSHKEY"},"~g' /tmp/json/merge.json > output301.txt","\n",
            "touch /tmp/touch3.1.txt","\n",
            "jq -s add /tmp/origconfig.json /tmp/json/merge.json > /tmp/json/sendit.json","\n",
            "touch /tmp/touch3.2.txt","\n",
            "curl --insecure \"https://localhost/api/installation_settings\" -F 'installation[file]=@/tmp/json/sendit.json' -X POST -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "curl --insecure \"https://localhost/api/installation_settings\" -X GET -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" }," > /tmp/configwithoutguid.json","\n",
            "git clone https://gist.github.com/4818a5b92e1754fff3d1.git /tmp/json/withoutguid","\n",
            "nwGuid=$(cat /tmp/configwithoutguid.json | jq '.infrastructure.networks[0].guid')","\n",
            "sudo sed -i \"s/<NETWORKGUID>/$nwGuid/g\" /tmp/json/withoutguid/networkguid.json","\n",
            "#jq -s add /tmp/configwithoutguid.json /tmp/json/withoutguid/networkguid.json > /tmp/json/sendit2.json","\n",
            "git clone https://gist.github.com/a6c0c9dee2adeeeb91f6.git /tmp/mergej","\n",
            "cd /tmp/mergej","\n",
            "python mergejson.py","\n",
            "curl --insecure \"https://localhost/api/installation_settings\" -F 'installation[file]=@/tmp/json/sendit2.json' -X POST -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "#curl --insecure \"https://localhost/api/installation\" -d 'ignore_warnings=true' -X POST -u ", { "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "touch /tmp/touch4.txt","\n", 
            "rm -rf /tmp/runtime","\n", 
            "mkdir /tmp/runtime","\n",
            "cd /tmp/runtime","\n",
            "touch /tmp/touch5.txt","\n",
            "wget ",{ "Ref" : "ElasticRuntimeURL" } ," -O /tmp/runtime/ER.zip","\n",
            "curl --insecure 'https://localhost/api/products' -F 'product[file]=@/tmp/runtime/ER.zip' -X POST -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" }," -k","\n",
            "#curl --insecure \"https://localhost/api/installation\" -d 'ignore_warnings=true' -X POST -u ", { "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "touch /tmp/done.txt","\n"
        ]]}},
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.88",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgPCF"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },

    "NatInstance1": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "ImageId": "ami-224dc94a",
        "InstanceType": "m1.small",
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Nat1"
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "sgPCF": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "launch-wizard-1 created 2014-12-11T17:23:01.449-06:00",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PCFsg"
          }
        ]
      }
    },
    "NatSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow NAT access from the VPC",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "SecurityGroupIngress": [
          {},
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "PrivateRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatInstance1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "CidrBlock": "10.0.0.1/24",
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PCFVPC": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PCF"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "VPCGatewayAttachment": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
  }
}
