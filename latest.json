
{
  "Description": "pivotalcf template",
  "Mappings": {
    "NatAmi": {
      "ap-northeast-1": {
        "AMI": "ami-27d6e626"
      },
      "ap-southeast-1": {
        "AMI": "ami-6aa38238"
      },
      "ap-southeast-2": {
        "AMI": "ami-893f53b3"
      },
      "eu-west-1": {
        "AMI": "ami-14913f63"
      },
      "sa-east-1": {
        "AMI": "ami-224dc94a"
      },
      "us-east-1": {
        "AMI": "ami-184dc970"
      },
      "us-west-1": {
        "AMI": "ami-a98396ec"
      },
      "us-west-2": {
        "AMI": "ami-290f4119"
      }
    }
  },
  "Outputs": {
    "PCFiamUser": {
     "Value": { "Ref":"pcfiamuser" },
     "Description": "AWS IAM User Created for PCF"
    },

    "AccessKey": {
      "Value" : { "Ref" : "myaccesskey" },
      "Description": "Users accesskey"  
    },
    
    "SecretKey":{
      "Value" : { "Fn::GetAtt" : [ "myaccesskey", "SecretAccessKey" ]}
    },
    "OpsMgrBucketName": {
            "Value": {
                "Ref": "opsmanagerbucket"
            },
            "Description": "Name of the Ops Manager S3 bucket for PivotalCF."
        },
     "ElasticRuntimeBucketName": {
            "Value": {
                "Ref": "elasticruntimebucket"
            },
            "Description": "Name of the Elastic Runtime S3 bucket for PivotalCF."
        },
    "NatEip1": {
      "Description": "AWS Elastic IP of the NAT instance 1",
      "Value": {
        "Ref": "NatEip1"
      }
    },
   "AWSAZ": {
      "Description": "AWS AZ selected",
      "Value": {"Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWSRegion" }  } ] }

    },
   "PrivateSubnet1" : {
      "Value" : { "Ref" : "PrivateSubnet1" },
      "Description" : "This is the SubnetID of te Private Subnet"
   },
   "PublicSubnet1" : {
      "Value" : { "Ref" : "PublicSubnet1" },
      "Description" : "This is the SubnetID of te Public Subnet"
   },
   "RDSHost": {
      "Value": {"Fn::GetAtt" : [ "MyRDS" , "Endpoint.Address" ]},
      "Description": "This is the RDS host endpoint"
    },
    "RDSPort":{
      "Value": {"Fn::GetAtt" : [ "MyRDS" , "Endpoint.Port" ]},
      "Description": "This is the RDS port"
    },
   "ElasticLoadBalancer" : {
      "Description": "The DNSName of the PCF Elastic Load Balancer",  
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}
   },
    
   "PCFVpcId" : {
      "Value" : { "Ref" : "PCFVPC" },
      "Description" : "This is the VpcID of the PCF VPC"
   }, 
   "OpsManDNS" : {
      "Value" : { "Fn::GetAtt": [ "OpsManagerInstance", "PublicDnsName" ] },
      "Description" : "This is the PublicDNS Name of OpsManger"
   }    

  },
  "Parameters": {
    "DBUser":{
      "Type": "String",
      "Default": "admin",
      "Description": "Enter the desired RDS user"
      },
    "DBPassword":{
      "Type": "String",
      "NoEcho": "true",
      "Default": "password",
      "Description": "Enter the desired RDS password (default is password)"
      },
    "AWSAccessKeyID": {
      "Type": "String",
      "Default": "",
      "Description": "Enter your AWS Access Key ID"
    },
    
    "AWSSecretKey": {
      "Type": "String",
      "Default": "",
      "Description": "Enter AWS Secret Key"
    },
    "OpsMgrWebUID": {
      "Type": "String",
      "Default": "admin",
      "Description": "Ops Manager Web Username (will create) - admin is default"
    },
    "OpsMgrWebPW": {
      "Type": "String",
      "NoEcho": "true",
      "Default": "password",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Description": "Ops Manager Web Password - (default is password)"
    },
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "Alphanumeric characters, underscores, dashes only",
      "Description": "Existing key pair to access instances",
      "Default": "opsmgr",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "String"
    },
    "OpsMgrAMI": {
      "Type": "String",
      "Default": "ami-fa5b6792",
      "Description": "Enter Ops Manager AMI"
    },
   
    "AWSRegion": {
      "Type": "String",
      "Default": "us-east-1",
      "Description": "AWS Region"
    },
    "NatInstanceType": {
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Instance type must be of a valid EC2 type",
      "Default": "m1.small",
      "Description": "EC2 instance type for NAT instances",
      "Type": "String"
    }
  },
  "Resources": {
   "opsmanagerbucket": {
    "Type" : "AWS::S3::Bucket",
    "Properties" : {
   

      "Tags" : [
          {
            "Key": "Name",
            "Value": "Ops Manager S3 Bucket"
          }
        ]
   }
   },
   "elasticruntimebucket": {
   "Type" : "AWS::S3::Bucket",
   "Properties" : {
   

      "Tags" : [
          {
            "Key": "Name",
            "Value": "Elastic Runtime S3 Bucket"
          }
        ]
   }
   },
       
"pcfiamuser" : {
   "Type" : "AWS::IAM::User",
   "Properties" : {
      "Path" : "/",
      "LoginProfile" : {
         "Password" : "myP@ssW0rd"
      }
      
   }
},
"myaccesskey" : {
   "Type" : "AWS::IAM::AccessKey",
   "Properties" : {
      "UserName" : { "Ref" : "pcfiamuser" }
   }
 },
"mypolicy":{
   "Type": "AWS::IAM::Policy",
   "Properties": {
      "PolicyName": "pcfpolicy",
      "PolicyDocument": {
  "Version": "2012-10-17",
  "Statement": [
    {
        "Effect": "Deny",
        "Action": [
            "iam:*"
        ],
        "Resource": [
            "*"
        ]
    },
    {
        "Sid": "OpsMgrInfrastructureIaasConfiguration",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeKeypairs",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeAvalibilityZones",
            "ec2:DescribeAccountAttributes"
        ],
        "Resource": "*"
    },
    {
        "Sid": "OpsMgrInfrastructureDirectorConfiguration",
        "Effect": "Allow",
        "Action": [
            "s3:*"
        ],
        "Resource": [
            "arn:aws:s3:::opsmgrbucket",
            "arn:aws:s3:::opsmgrbucket/*",
            "arn:aws:s3:::elasticruntimebucket",
            "arn:aws:s3:::elasticruntimebucket/*"
        ]
    },
    {
        "Sid": "OpsMgrInfrastructureAvilibilityZones",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeAvailabilityZones"
        ],
        "Resource": "*"
    },
    {
        "Sid": "OpsMgrInfrastructureNetworks",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeSubnets"
        ],
        "Resource": "*"
    },
    {
        "Sid": "DeployMicroBosh",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeImages",
            "ec2:RunInstances",
            "ec2:DescribeInstances",
            "ec2:TerminateInstances",
            "ec2:RebootInstances",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "ec2:DescribeAddresses",
            "ec2:DisassociateAddress",
            "ec2:AssociateAddress",
            "ec2:CreateTags",
            "ec2:DescribeVolumes",
            "ec2:CreateVolume",
            "ec2:AttachVolume",
            "ec2:DeleteVolume",
            "ec2:DetachVolume"
        ],
        "Resource": "*"
     }
   ]
   },
   
      "Users": [ { "Ref": "pcfiamuser" } ]
    }

   },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "NatEip1": {
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NatInstance1"
        }
      },
      "Type": "AWS::EC2::EIP"
    },
    "OpsManagerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": { "Ref" : "OpsMgrAMI" },
        "InstanceType": "m3.large",
        "KernelId": "aki-919dcaf8",
        "KeyName": { "Ref" : "KeyName" },
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/sda1",
                  "Ebs" : {
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "100"
                  }
               }
            ],
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Ops Manager"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
            "#!/bin/bash -ex","\n",
             "sleep 30","\n",
            "## This sleep just makes sure opsmanager gets started up - probably better way to do this","\n",
            "curl --insecure \"https://localhost/api/users\" -d 'user[user_name]=",{ "Ref" : "OpsMgrWebUID" },"&user[password]=",{ "Ref" : "OpsMgrWebPW" },"&user[password_confirmation]=",{ "Ref" : "OpsMgrWebPW" },"' -X POST","\n",                 
            "curl --insecure \"https://localhost/api/installation_settings\" -X GET -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" }," > /tmp/origconfig.json","\n",
             "touch /tmp/done.txt","\n"
        ]]}},
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.88",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "OpsManager"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },

    "NatInstance1": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "ImageId": "ami-224dc94a",
        "InstanceType": "m1.small",
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Nat1"
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "OpsManager": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "launch-wizard-1 created 2014-12-11T17:23:01.449-06:00",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PCFsg"
          }
        ]
      }
    },
    "NatSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow NAT access from the VPC",

        "SecurityGroupIngress": [
          
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "OutboundNAT"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "pcfVMs": {
      "Properties": {
        "GroupDescription": "pcfVMs",

        "SecurityGroupIngress": [
          
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "pcfVMs"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
     "MySQLSecurityGroup": {
      "Properties": {
        "GroupDescription": "MySQL Security Group for PCF",

        "SecurityGroupIngress": [
          
       
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "ToPort": "3306"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "MySQLSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
     "PCFELBSecurityGroup": {
      "Properties": {
        "GroupDescription": "PCF_ELB_SecurityGroup",

        "SecurityGroupIngress": [
          
       
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "4443",
            "IpProtocol": "tcp",
            "ToPort": "4443"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "PCF_ELB_SecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
    "PrivateRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatInstance1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateSubnet1": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWSRegion" }} ] },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" :  { "Ref" : "AWSRegion" } } ] },
        "CidrBlock": "10.0.0.1/24",
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "rds1": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" :  { "Ref" : "AWSRegion" } } ] },
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "rds-1"
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "rds2": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" :  { "Ref" : "AWSRegion" } } ] },
        "CidrBlock": "10.0.3.0/24",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "rds-2"
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
   "PCFRDSGroup": {
    "Type" : "AWS::RDS::DBSubnetGroup",
    "Properties" : {
      "DBSubnetGroupDescription" : "PCF RDS Subnet Group" ,
      "SubnetIds" : [ {"Ref": "rds1"},{"Ref": "rds2"} ],
      "Tags" : [ {
            "Key": "Name",
            "Value": "PCF RDS Subnet Group"
          }]
     }
    },
    "MyRDS" : {
     "Type" : "AWS::RDS::DBInstance",
     "Properties" : {
       "AllocatedStorage" : "100",
       "DBInstanceClass" : "db.m3.large",
       "Engine" : "MySQL",
       "EngineVersion" : "5.6.22",
       "MultiAZ" : "True",
       "DBName" : "bosh",
       "Iops" : "1000",
       "DBInstanceIdentifier" : "pcf-bosh",
       "MasterUsername" : { "Ref" : "DBUser" },
       "MasterUserPassword" : { "Ref" : "DBPassword" },
       "PubliclyAccessible" : "False",
       "VPCSecurityGroups" : [ { "Ref": "MySQLSecurityGroup"} ],
       "DBSubnetGroupName" : { "Ref": "PCFRDSGroup"}
     }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {

       "Subnets": [
          {
            "Ref":"PublicSubnet1"           }
        ],
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "10",
          "Target": "HTTP:80/",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
             "Ref": "PCFELBSecurityGroup"           }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      }
    },
       "PublicSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PCFVPC": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PCF"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "VPCGatewayAttachment": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
  }
}
